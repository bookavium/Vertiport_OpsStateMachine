{
  "Comment": "Demo of a full flight with turnaround on a vertiport.",
  "StartAt": "Pass",
  "States": {
    "Pass": {
      "Comment": "A Pass state passes its input to its output, without performing work. Pass states are useful when constructing and debugging state machines.",
      "Type": "Pass",
      "Next": "New flight data"
    },
    "New flight data":{
      "Comment": "log the flight data in the database",
      "Type": "Task",
      "Resource": "${api-rest-serverless-vertiport-dev-flightPlanInfo_post.lambda.arn}",
      "End": true
    },








    "Hello World example?": {
      "Comment": "A Choice state adds branching logic to a state machine. Choice rules can implement 16 different comparison operators, and can be combined using And, Or, and Not",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.IsHelloWorldExample",
          "BooleanEquals": true,
          "Next": "Yes"
        },
        {
          "Variable": "$.IsHelloWorldExample",
          "BooleanEquals": false,
          "Next": "No"
        }
      ],
      "Default": "Yes"
    },
    "Yes": {
      "Type": "Pass",
      "Next": "Wait 3 sec"
    },
    "No": {
      "Type": "Fail",
      "Cause": "Not Hello World"
    },
    "Wait 3 sec": {
      "Comment": "A Wait state delays the state machine from continuing for a specified time.",
      "Type": "Wait",
      "Seconds": 3,
      "Next": "Parallel State"
    },
    "Parallel State": {
      "Comment": "A Parallel state can be used to create parallel branches of execution in your state machine.",
      "Type": "Parallel",
      "Next": "Hello World",
      "Branches": [
        {
          "StartAt": "Hello",
          "States": {
            "Hello": {
              "Type": "Pass",
              "End": true
            }
          }
        },
        {
          "StartAt": "World",
          "States": {
            "World": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ]
    },
    "Hello World": {
      "Type": "Pass",
      "End": true
    }
  }
}


{
  "Comment": "Calling APIGW REST Endpoint",
  "StartAt": "Enter a new FlightPlan in the db",
  "States": {
    "Enter a new FlightPlan in the db": {
      "Type": "Task",
      "Resource": "arn:aws:states:::apigateway:invoke",
      "Parameters": {
        "ApiEndpoint": "<POST_FLIGHTPLAN>",
        "Method": "POST",
        "Stage": "dev",
        "Path": "/flightPlanInfo/flightPlanInfo_post",
        "RequestBody.$": "$.body",
        "AuthType": "IAM_ROLE"
      },
      "ResultSelector": {
        "ResponseBody.$": "$.response"
      },
      "Next": "FlightPlan was Added Successfully?"
    },
    "FlightPlan was Added Successfully?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.response.errors",
          "IsPresent": true,
          "Next": "Failure"
        }
      ],
      "Default": "FlightPlan Successfully Added"
    },
    "Failure": {
      "Type": "Fail"
    },
    "FlightPlan Successfully Added": {
      "Type": "Task",
      "Resource": "arn:aws:states:::apigateway:invoke",
      "Parameters": {
        "ApiEndpoint": "<GET_FLIGHTPLAN>",
        "Method": "GET",
        "Stage": "dev",
        "Path": "/FlightPlanInfo/flightPlanInfo_get",
        "AuthType": "IAM_ROLE"
      },
      "ResultSelector": {
        "FLightPlanInfo.$": "$.response"
      },
      "ResultPath": "$.FlightPlanInfo",
      "End": true
    }
  }
}